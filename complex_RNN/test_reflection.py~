import theano
import pdb
from fftconv import cufft, cuifft
import numpy as np
import theano.tensor as T
from theano.ifelse import ifelse


def times_reflection(input, n_hidden, reflection):
    input_re = input[:, :n_hidden]
    input_im = input[:, n_hidden:]
    reflect_re = reflection[n_hidden:]
    reflect_im = reflection[:n_hidden]

    vstarv = (reflect_re**2 + reflect_im**2).sum()

    input_re_reflect = input_re - 2 / vstarv * (T.outer(T.dot(input_re, reflect_re), reflect_re) 
                                                + T.outer(T.dot(input_re, reflect_im), reflect_im) 
                                                - T.outer(T.dot(input_im, reflect_im), reflect_re) 
                                                + T.outer(T.dot(input_im, reflect_re), reflect_im))
    input_im_reflect = input_im - 2 / vstarv * (T.outer(T.dot(input_im, reflect_re), reflect_re) 
                                                + T.outer(T.dot(input_im, reflect_im), reflect_im) 
                                                + T.outer(T.dot(input_re, reflect_im), reflect_re) 
                                                - T.outer(T.dot(input_re, reflect_re), reflect_im))

    return T.concatenate([input_re_reflect, input_im_reflect], axis=1)      


np.random.seed(1234)
rng = np.random.RandomState(1234)


x = T.matrix()

n_hidden = 10

bin = np.sqrt(6. / (n_in + n_out))
v_values = np.asarray(rng.uniform(low=-bin,
                                  high=bin,
                                  size=(2*n_hidden, 1)),
                      dtype=theano.config.floatX)
v = theano.shared(v_values)


y = times_reflection(x, n_hidden, v)
c = y.sum()

dy = T.alloc(1., 2*n_hidden, 1)

###----- Gradient computation ---------------------------------------------------------------------

    v_re = v[:n_hidden]
    v_im = v[n_hidden:]
    vstarv = (v_re ** 2 + v_im ** 2).sum()

    dstep7_re = dstep7[:, :n_hidden]
    dstep7_im = dstep7[:, n_hidden:]
    step6_re = step6[:, :n_hidden]
    step6_im = step6[:, n_hidden:]

    v_re_dot_v_re = T.dot(v_re, v_re.T)
    v_im_dot_v_im = T.dot(v_im, v_im.T)
    v_im_dot_v_re = T.dot(v_im, v_re.T)

    dstep7_re_dot_v_re = T.dot(dstep7_re, v_re.T) #n_b x 1
    dstep7_re_dot_v_im = T.dot(dstep7_re, v_im.T)
    step6_re_dot_v_re = T.dot(step6_re, v_re.T)
    step6_re_dot_v_im = T.dot(step6_re, v_im.T)
    dstep7_im_dot_v_re = T.dot(dstep7_im, v_re.T)
    dstep7_im_dot_v_im = T.dot(dstep7_im, v_im.T)
    step6_im_dot_v_re = T.dot(step6_im, v_re.T)
    step6_im_dot_v_im = T.dot(step6_im, v_im.T)

    dstep7_re_timesum_step6_re = (dstep7_re * step6_re).sum(axis=1)
    dstep7_re_timesum_step6_im = (dstep7_re * step6_im).sum(axis=1)
    dstep7_im_timesum_step6_re = (dstep7_im * step6_re).sum(axis=1)
    dstep7_im_timesum_step6_im = (dstep7_im * step6_im).sum(axis=1)

    #--------

    dstep7_re_v_re_step6vvstar_re = T.outer((dstep7_re_dot_v_re * step6_re_dot_v_re), v_re) \
        + T.outer((dstep7_re_dot_v_re * step6_re_dot_v_im), v_im) \
        - T.outer((dstep7_re_dot_v_re * step6_im_dot_v_im), v_re) \
        + T.outer((dstep7_re_dot_v_re * step6_im_dot_v_re), v_im)

    dstep7_im_v_re_step6vvstar_im = T.outer((dstep7_im_dot_v_re * step6_im_dot_v_re), v_re) \
        + T.outer((dstep7_im_dot_v_re * step6_im_dot_v_im), v_im) \
        + T.outer((dstep7_im_dot_v_re * step6_re_dot_v_im), v_re) \
        - T.outer((dstep7_im_dot_v_re * step6_re_dot_v_re), v_im)

    dstep7_re_dstep6vvstardv_re_re = T.outer(dstep7_re_timesum_step6_re, v_re) \
        + dstep7_re * step6_re_dot_v_re.dimshuffle(0, 'x') \
        - dstep7_re * step6_im_dot_v_im.dimshuffle(0, 'x') \
        + T.outer(dstep7_re_timesum_step6_im, v_im)

    dstep7_im_dstep6vvstardv_re_im = T.outer(dstep7_im_timesum_step6_im, v_re) \
        + dstep7_im * step6_im_dot_v_re.dimshuffle(0, 'x') \
        + dstep7_im * step6_re_dot_v_im.dimshuffle(0, 'x') \
        - T.outer(dstep7_im_timesum_step6_re, v_im)

    dv_re_contribution = 4. / (vstarv**2) * dstep7_re_v_re_step6vvstar_re \
        - 2. / vstarv * dstep7_re_dstep6vvstardv_re_re \
        - 4. / (vstarv**2) * dstep7_im_v_re_step6vvstar_im \
        + 2. / vstarv * dstep7_im_dstep6vvstardv_re_im

    #--------
    dstep7_re_v_im_step6vvstar_im = T.outer((dstep7_re_dot_v_im * step6_im_dot_v_re), v_re) \
        + T.outer((dstep7_re_dot_v_im * step6_im_dot_v_im), v_im) \
        + T.outer((dstep7_re_dot_v_im * step6_re_dot_v_im), v_re) \
        - T.outer((dstep7_re_dot_v_im * step6_re_dot_v_re), v_im)

    dstep7_im_v_im_step6vvstar_re = T.outer((dstep7_im_dot_v_im * step6_re_dot_v_re), v_re) \
        + T.outer((dstep7_im_dot_v_im * step6_re_dot_v_im), v_im) \
        - T.outer((dstep7_im_dot_v_im * step6_im_dot_v_im), v_re) \
        + T.outer((dstep7_im_dot_v_im * step6_im_dot_v_re), v_im)

    dstep7_re_dstep6vvstardv_im_im = T.outer(dstep7_re_timesum_step6_im, v_im) \
        + dstep7_re * step6_im_dot_v_im.dimshuffle(0, 'x') \
        + T.outer(dstep7_re_timesum_step6_re, v_re) \
        - dstep7_re * step6_re_dot_v_re.dimshuffle(0, 'x')

    dstep7_im_dstep6vvstardv_im_re = T.outer(dstep7_im_timesum_step6_re, v_im) \
        + dstep7_im * step6_re_dot_v_im.dimshuffle(0, 'x') \
        - T.outer(dstep7_im_timesum_step6_im, v_re) \
        + dstep7_im * step6_im_dot_v_re.dimshuffle(0, 'x')

    dv_im_contribution = 4. / (vstarv**2) * dstep7_re_v_im_step6vvstar_im \
        - 2. / vstarv * dstep7_re_dstep6vvstardv_im_im \
        + 4. / (vstarv**2) * dstep7_im_v_im_step6vvstar_re \
        - 2. / vstarv * dstep7_im_dstep6vvstardv_im_re

    dreflection_t = T.inc_subtensor(dreflection_t[:, 1, :n_hidden], dv_re_contribution)
    dreflection_t = T.inc_subtensor(dreflection_t[:, 1, n_hidden:], dv_im_contribution)



